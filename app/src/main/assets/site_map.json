[
  {
    "title": "resource",
    "node": [
      {
        "title": "aaaaaaaa",
        "url": ".resource.WebViewDemo1"
      }
    ]
  },
  {
    "title": "view（ListView）",
    "node": [
      {
        "title": "ListView 通过 ArrayAdapter 显示数据",
        "url": ".view.listview.ListViewDemo1"
      },
      {
        "title": "ListView 通过 SimpleAdapter 显示数据",
        "url": ".view.listview.ListViewDemo2"
      },
      {
        "title": "ListView 通过自定义 BaseAdapter 显示数据",
        "url": ".view.listview.ListViewDemo3"
      },
      {
        "title": "ListView 的 item 的点击事件和长按事件",
        "url": ".view.listview.ListViewDemo4"
      },
      {
        "title": "ListView 的单选和多选，以及 getView() 的调用时机",
        "url": ".view.listview.ListViewDemo5"
      },
      {
        "title": "ListView 的表头，表尾，滚动条的显示与隐藏，数据更新与 ListView 刷新，滚动到指定位置，监听 ListView 的滚动状态",
        "url": ".view.listview.ListViewDemo6"
      },
      {
        "title": "ListView 的多布局（不同的 item 使用不同的项模板）",
        "url": ".view.listview.ListViewDemo7"
      },
      {
        "title": "ListView 滚动到底部加载更多数据",
        "url": ".view.listview.ListViewDemo8"
      },
      {
        "title": "ListView ddddddddddddd",
        "url": ".view.listview.ListViewDemo9"
      }
    ]
  },
  {
    "title": "view（WebView）",
    "node": [
      {
        "title": "aaaaaaaa",
        "url": ".view.webview.WebViewDemo1"
      }
    ]
  },
  {
    "title": "view（自定义）",
    "node": [
      {
        "title": "通过一个自定义 View 来演示 measure, layout, draw",
        "url": ".view.custom.CustomView1Demo"
      },
      {
        "title": "通过一个自定义 ViewGroup 来演示 measure, layout, draw",
        "url": ".view.custom.CustomView2Demo"
      },
      {
        "title": "自定义组合控件",
        "url": ".view.custom.CustomView3Demo"
      },
      {
        "title": "自定义控件的自定义属性",
        "url": ".view.custom.CustomView4Demo"
      },
      {
        "title": "aaaaaaaaaaa",
        "url": ".view.custom.MyLayoutDemo1"
      },
      {
        "title": "dddddddddddd",

        "url": ".view.custom.CustomView3Demo"
      }
    ]
  },
  {
    "title": "UI",
    "node": [
      {
        "title": "UIDemo1",
        "url": ".ui.UIDemo1"
      },
      {
        "title": "主题简介，继承主题并重写其中的一些样式，指定主题",
        "url": ".ui.ThemeDemo1"
      },
      {
        "title": "StyleDemo1",
        "url": ".ui.StyleDemo1"
      },
      {
        "title": "android 基础示例",
        "url": ".ui.BasicDemo1"
      }
    ]
  },
  {
    "title": "view（基础）",
    "node": [
      {
        "title": "位置相关",
        "url": ".view.ViewDemo1"
      },
      {
        "title": "边距相关，隐藏相关",
        "url": ".view.ViewDemo2"
      },
      {
        "title": "ccccccccccccccccccc",
        "url": ".view.ViewDemo3"
      }
    ]
  },
  {
    "title": "view（进度类）",
    "node": [
      {
        "title": "ProgressBar 基础",
        "url": ".view.progress.ProgressBarDemo1"
      },
      {
        "title": "ProgressBar 样式",
        "url": ".view.progress.ProgressBarDemo2"
      },
      {
        "title": "SeekBar 基础",
        "url": ".view.progress.SeekBarDemo1"
      },
      {
        "title": "SeekBar 样式",
        "url": ".view.progress.SeekBarDemo2"
      },
      {
        "title": "RatingBar 基础",
        "url": ".view.progress.RatingBarDemo1"
      },
      {
        "title": "RatingBar 样式",
        "url": ".view.progress.RatingBarDemo2"
      }
    ]
  },
  {
    "title": "view（选择类）",
    "node": [
      {
        "title": "RadioButton 基础",
        "url": ".view.selection.RadioButtonDemo1"
      },
      {
        "title": "RadioButton 样式",
        "url": ".view.selection.RadioButtonDemo2"
      },
      {
        "title": "CheckBox 基础",
        "url": ".view.selection.CheckBoxDemo1"
      },
      {
        "title": "CheckBox 样式",
        "url": ".view.selection.CheckBoxDemo2"
      },
      {
        "title": "ToggleButton 基础",
        "url": ".view.selection.ToggleButtonDemo1"
      },
      {
        "title": "ToggleButton 样式",
        "url": ".view.selection.ToggleButtonDemo2"
      },
      {
        "title": "Switch 基础",
        "url": ".view.selection.SwitchDemo1"
      },
      {
        "title": "Switch 样式",
        "url": ".view.selection.SwitchDemo2"
      },
      {
        "title": "NumberPicker 基础",
        "url": ".view.selection.NumberPickerDemo1"
      },
      {
        "title": "NumberPicker 样式",
        "url": ".view.selection.NumberPickerDemo2"
      }
    ]
  },
  {
    "title": "view（按钮类）",
    "node": [
      {
        "title": "Button 响应单击事件的方法",
        "url": ".view.button.ButtonDemo1"
      },
      {
        "title": "Button 样式",
        "url": ".view.button.ButtonDemo2"
      },
      {
        "title": "ImageButton 图片按钮",
        "url": ".view.button.ImageButtonDemo1"
      }
    ]
  },
  {
    "title": "view（媒体类）",
    "node": [
      {
        "title": "ImageView 基础",
        "url": ".view.media.ImageViewDemo1"
      },
      {
        "title": "ImageView 的 scaleType",
        "url": ".view.media.ImageViewDemo2"
      },
      {
        "title": "9patch（nine patch）图片",
        "url": ".view.media.NinePatchDemo1"
      }
    ]
  },
  {
    "title": "concurrent",
    "node": [
      {
        "title": "Lock 基础",
        "url": ".concurrent.LockDemo1"
      },
      {
        "title": "Lock 可 interrupt 的 Lock",
        "url": ".concurrent.LockDemo2"
      },
      {
        "title": "Lock 演示 Condition 的 await() signal() signalAll() 的使用",
        "url": ".concurrent.LockDemo3"
      },
      {
        "title": "Lock 演示 ReentrantLock 的使用",
        "url": ".concurrent.ReentrantLockDemo1"
      },
      {
        "title": "synchronized 锁方法",
        "url": ".concurrent.SynchronizedDemo1"
      },
      {
        "title": "synchronized 锁代码块",
        "url": ".concurrent.SynchronizedDemo2"
      },
      {
        "title": "ReadWriteLock 基础",
        "url": ".concurrent.ReadWriteLockDemo1"
      },
      {
        "title": "ReadWriteLock 演示 ReentrantReadWriteLock 的使用",
        "url": ".concurrent.ReentrantReadWriteLockDemo1"
      },
      {
        "title": "volatile 与原子性, 可见性, 有序性",
        "url": ".concurrent.VolatileDemo1"
      },
      {
        "title": "CountDownLatch 信号数量",
        "url": ".concurrent.CountDownLatchDemo1"
      },
      {
        "title": "CyclicBarrier 屏障",
        "url": ".concurrent.CyclicBarrierDemo1"
      },
      {
        "title": "Semaphore 许可证中心",
        "url": ".concurrent.SemaphoreDemo1"
      },
      {
        "title": "atomic 原子操作",
        "url": ".concurrent.AtomicDemo1"
      }
    ]
  },
  {
    "title": "view（布局类）",
    "node": [
      {
        "title": "FrameLayout 叠加布局",
        "url": ".view.layout.FrameLayoutDemo1"
      },
      {
        "title": "LinearLayout 线性布局",
        "url": ".view.layout.LinearLayoutDemo1"
      },
      {
        "title": "RelativeLayout 相对布局",
        "url": ".view.layout.RelativeLayoutDemo1"
      },
      {
        "title": "TableLayout 表格布局",
        "url": ".view.layout.TableLayoutDemo1"
      },
      {
        "title": "GridLayout 网格布局",
        "url": ".view.layout.GridLayoutDemo1"
      },
      {
        "title": "ConstraintLayout 约束布局（基础）",
        "url": ".view.layout.ConstraintLayoutDemo1"
      },
      {
        "title": "ConstraintLayout 约束布局控件（链）",
        "url": ".view.layout.ConstraintLayoutDemo2"
      },
      {
        "title": "ConstraintLayout 约束布局控件（屏障/分组/占位）",
        "url": ".view.layout.ConstraintLayoutDemo3"
      }
    ]
  },
  {
    "title": "async",
    "node": [
      {
        "title": "Thread 基础",
        "url": ".async.ThreadDemo1"
      },
      {
        "title": "Thread 演示 Object 的 wait() notify() notifyAll() 的使用",
        "url": ".async.ThreadDemo2"
      },
      {
        "title": "Thread 演示 join() 的用法",
        "url": ".async.ThreadDemo3"
      },
      {
        "title": "Thread 演示 interrupt() 的用法",
        "url": ".async.ThreadDemo4"
      },
      {
        "title": "Thread 的异常处理",
        "url": ".async.ThreadDemo5"
      },
      {
        "title": "Thread 导致的内存泄漏",
        "url": ".async.ThreadDemo6"
      },
      {
        "title": "Handler 的使用",
        "url": ".async.HandlerDemo1"
      },
      {
        "title": "Handler 和 Looper 的使用",
        "url": ".async.HandlerDemo2"
      },
      {
        "title": "Handler 导致的 Activity 内存泄漏",
        "url": ".async.HandlerDemo3"
      },
      {
        "title": "ThreadPool 的基础",
        "url": ".async.ThreadPoolDemo1"
      },
      {
        "title": "ThreadPool 的关闭",
        "url": ".async.ThreadPoolDemo2"
      },
      {
        "title": "Callable, Future, FutureTask 的使用",
        "url": ".async.FutureTaskDemo1"
      },
      {
        "title": "Future, FutureTask 的关闭和异常处理",
        "url": ".async.FutureTaskDemo2"
      },
      {
        "title": "AsyncTask 的使用",
        "url": ".async.AsyncTaskDemo1"
      },
      {
        "title": "Timer 和 TimerTask 的使用",
        "url": ".async.TimerDemo1"
      },
      {
        "title": "ThreadLocal 的使用",
        "url": ".async.ThreadLocalDemo1"
      }
    ]
  },
  {
    "title": "view（文本类）",
    "node": [
      {
        "title": "TextView 常用属性",
        "url": ".view.text.TextViewDemo1"
      },
      {
        "title": "TextView 字体相关",
        "url": ".view.text.TextViewDemo2"
      },
      {
        "title": "TextView 阴影和图文",
        "url": ".view.text.TextViewDemo3"
      },
      {
        "title": "TextView 的 html 支持",
        "url": ".view.text.TextViewDemo4"
      },
      {
        "title": "TextView 的 Spannable（自定义显示样式）",
        "url": ".view.text.TextViewDemo5"
      },
      {
        "title": "TextView 常用行为",
        "url": ".view.text.TextViewDemo6"
      },
      {
        "title": "EditText 常用属性",
        "url": ".view.text.EditTextDemo1"
      },
      {
        "title": "EditText 选中和光标",
        "url": ".view.text.EditTextDemo2"
      },
      {
        "title": "EditText 软键盘",
        "url": ".view.text.EditTextDemo3"
      }
    ]
  },
  {
    "title": "服务",
    "node": [
      {
        "title": "android 基础示例    http://androiddoc.qiniudn.com/reference/packages.html文档",
        "url": ".service.BasicDemo1"
      }
    ]
  }
]