[
  {
    "title": "kotlin",
    "node": [
      {
        "title": "hello world",
        "url": ".kotlin.HelloWorld"
      }
    ]
  },
  {
    "title": "输入",
    "node": [
      {
        "title": "Touch 基础（点击，双击，长按；触摸按下，触摸移动，触摸抬起）",
        "url": ".input.TouchDemo1"
      },
      {
        "title": "Touch 基础（触摸位置，事件冒泡）",
        "url": ".input.TouchDemo2"
      },
      {
        "title": "Touch 多点触摸（单点拖拽，两点缩放）",
        "url": ".input.TouchDemo3"
      },
      {
        "title": "Touch 在自定义控件中处理触摸事件",
        "url": ".input.TouchDemo4"
      }
    ]
  },
  {
    "title": "view（基础）",
    "node": [
      {
        "title": "位置相关",
        "url": ".view.ViewDemo1"
      },
      {
        "title": "边距相关，隐藏相关",
        "url": ".view.ViewDemo2"
      },
      {
        "title": "ccccccccccccccccccc",
        "url": ".view.ViewDemo3"
      }
    ]
  },
  {
    "title": "view（文本类）",
    "node": [
      {
        "title": "TextView 常用属性",
        "url": ".view.text.TextViewDemo1"
      },
      {
        "title": "TextView 字体相关",
        "url": ".view.text.TextViewDemo2"
      },
      {
        "title": "TextView 阴影和图文",
        "url": ".view.text.TextViewDemo3"
      },
      {
        "title": "TextView 的 html 支持",
        "url": ".view.text.TextViewDemo4"
      },
      {
        "title": "TextView 的 Spannable（自定义显示样式）",
        "url": ".view.text.TextViewDemo5"
      },
      {
        "title": "TextView 常用行为",
        "url": ".view.text.TextViewDemo6"
      },
      {
        "title": "EditText 常用属性",
        "url": ".view.text.EditTextDemo1"
      },
      {
        "title": "EditText 选中和光标",
        "url": ".view.text.EditTextDemo2"
      },
      {
        "title": "EditText 软键盘",
        "url": ".view.text.EditTextDemo3"
      },
      {
        "title": "AutoCompleteTextView 基础",
        "url": ".view.text.AutoCompleteTextViewDemo1"
      },
      {
        "title": "MultiAutoCompleteTextView 基础",
        "url": ".view.text.MultiAutoCompleteTextViewDemo1"
      }
    ]
  },
  {
    "title": "view（按钮类）",
    "node": [
      {
        "title": "Button 响应单击事件的方法",
        "url": ".view.button.ButtonDemo1"
      },
      {
        "title": "Button 样式",
        "url": ".view.button.ButtonDemo2"
      },
      {
        "title": "ImageButton 图片按钮",
        "url": ".view.button.ImageButtonDemo1"
      }
    ]
  },
  {
    "title": "view（布局类）",
    "node": [
      {
        "title": "FrameLayout 叠加布局",
        "url": ".view.layout.FrameLayoutDemo1"
      },
      {
        "title": "LinearLayout 线性布局",
        "url": ".view.layout.LinearLayoutDemo1"
      },
      {
        "title": "RelativeLayout 相对布局",
        "url": ".view.layout.RelativeLayoutDemo1"
      },
      {
        "title": "TableLayout 表格布局",
        "url": ".view.layout.TableLayoutDemo1"
      },
      {
        "title": "GridLayout 网格布局",
        "url": ".view.layout.GridLayoutDemo1"
      },
      {
        "title": "ConstraintLayout 约束布局（基础）",
        "url": ".view.layout.ConstraintLayoutDemo1"
      },
      {
        "title": "ConstraintLayout 约束布局控件（链）",
        "url": ".view.layout.ConstraintLayoutDemo2"
      },
      {
        "title": "ConstraintLayout 约束布局控件（屏障/分组/占位）",
        "url": ".view.layout.ConstraintLayoutDemo3"
      },
      {
        "title": "ScrollView 滚动容器",
        "url": ".view.layout.ScrollViewDemo1"
      }
    ]
  },
  {
    "title": "view（导航类）",
    "node": [
      {
        "title": "ToolBar 基础",
        "url": ".view.navigation.ToolBarDemo1"
      },
      {
        "title": "ToolBar 显示自定义 view，清除自定义 view 与 Toolbar 两侧的间距，自定义弹出的 OptionMenu 的样式",
        "url": ".view.navigation.ToolBarDemo2"
      },
      {
        "title": "TabBar 自己实现",
        "url": ".view.navigation.TabBarDemo1"
      },
      {
        "title": "DrawerLayout 基础",
        "url": ".view.navigation.DrawerLayoutDemo1"
      }
    ]
  },
  {
    "title": "view（媒体类）",
    "node": [
      {
        "title": "ImageView 基础",
        "url": ".view.media.ImageViewDemo1"
      },
      {
        "title": "ImageView 的 scaleType",
        "url": ".view.media.ImageViewDemo2"
      },
      {
        "title": "9patch（nine patch）图片",
        "url": ".view.media.NinePatchDemo1"
      }
    ]
  },
  {
    "title": "view（进度类）",
    "node": [
      {
        "title": "ProgressBar 基础",
        "url": ".view.progress.ProgressBarDemo1"
      },
      {
        "title": "ProgressBar 样式",
        "url": ".view.progress.ProgressBarDemo2"
      },
      {
        "title": "SeekBar 基础",
        "url": ".view.progress.SeekBarDemo1"
      },
      {
        "title": "SeekBar 样式",
        "url": ".view.progress.SeekBarDemo2"
      },
      {
        "title": "RatingBar 基础",
        "url": ".view.progress.RatingBarDemo1"
      },
      {
        "title": "RatingBar 样式",
        "url": ".view.progress.RatingBarDemo2"
      }
    ]
  },
  {
    "title": "view（选择类）",
    "node": [
      {
        "title": "RadioButton 基础",
        "url": ".view.selection.RadioButtonDemo1"
      },
      {
        "title": "RadioButton 样式",
        "url": ".view.selection.RadioButtonDemo2"
      },
      {
        "title": "CheckBox 基础",
        "url": ".view.selection.CheckBoxDemo1"
      },
      {
        "title": "CheckBox 样式",
        "url": ".view.selection.CheckBoxDemo2"
      },
      {
        "title": "ToggleButton 基础",
        "url": ".view.selection.ToggleButtonDemo1"
      },
      {
        "title": "ToggleButton 样式",
        "url": ".view.selection.ToggleButtonDemo2"
      },
      {
        "title": "Switch 基础",
        "url": ".view.selection.SwitchDemo1"
      },
      {
        "title": "Switch 样式",
        "url": ".view.selection.SwitchDemo2"
      },
      {
        "title": "NumberPicker 基础",
        "url": ".view.selection.NumberPickerDemo1"
      },
      {
        "title": "NumberPicker 样式",
        "url": ".view.selection.NumberPickerDemo2"
      },
      {
        "title": "Spinner 基础",
        "url": ".view.selection.SpinnerDemo1"
      },
      {
        "title": "Spinner 样式",
        "url": ".view.selection.SpinnerDemo2"
      },
      {
        "title": "Spinner 通过 ArrayAdapter 显示数据",
        "url": ".view.selection.SpinnerDemo3"
      },
      {
        "title": "Spinner 通过 SimpleAdapter 显示数据",
        "url": ".view.selection.SpinnerDemo4"
      },
      {
        "title": "Spinner 通过自定义 BaseAdapter 显示数据",
        "url": ".view.selection.SpinnerDemo5"
      }
    ]
  },
  {
    "title": "view（弹出类）",
    "node": [
      {
        "title": "AlertDialog 基础",
        "url": ".view.flyout.AlertDialogDemo1"
      },
      {
        "title": "AlertDialog 自定义",
        "url": ".view.flyout.AlertDialogDemo2"
      },
      {
        "title": "AlertDialog 大小、位置和动画",
        "url": ".view.flyout.AlertDialogDemo3"
      },
      {
        "title": "AlertDialog 样式",
        "url": ".view.flyout.AlertDialogDemo4"
      },
      {
        "title": "ProgressDialog 基础",
        "url": ".view.flyout.ProgressDialogDemo1"
      },
      {
        "title": "DatePickerDialog 基础",
        "url": ".view.flyout.DatePickerDialogDemo1"
      },
      {
        "title": "TimePickerDialog 基础",
        "url": ".view.flyout.TimePickerDialogDemo1"
      },
      {
        "title": "PopupWindow 基础",
        "url": ".view.flyout.PopupWindowDemo1"
      },
      {
        "title": "PopupMenu 基础",
        "url": ".view.flyout.PopupMenuDemo1"
      },
      {
        "title": "PopupMenu 样式",
        "url": ".view.flyout.PopupMenuDemo2"
      },
      {
        "title": "ContextMenu 基础",
        "url": ".view.flyout.ContextMenuDemo1"
      },
      {
        "title": "ContextMenu 样式",
        "url": ".view.flyout.ContextMenuDemo2"
      }
    ]
  },
  {
    "title": "view（集合类）",
    "node": [
      {
        "title": "ViewFlipper 基础",
        "url": ".view.collection.ViewFlipperDemo1"
      },
      {
        "title": "ViewPager 基础 1",
        "url": ".view.collection.ViewPagerDemo1"
      },
      {
        "title": "ViewPager 基础 2",
        "url": ".view.collection.ViewPagerDemo2"
      },
      {
        "title": "ViewPager 和 FragmentPagerAdapter",
        "url": ".view.collection.ViewPagerDemo3"
      },
      {
        "title": "ViewPager 和 FragmentStatePagerAdapter",
        "url": ".view.collection.ViewPagerDemo4"
      },
      {
        "title": "GridView 基础 1",
        "url": ".view.collection.GridViewDemo1"
      },
      {
        "title": "GridView 基础 2",
        "url": ".view.collection.GridViewDemo2"
      },
      {
        "title": "ExpandableListView 基础",
        "url": ".view.collection.ExpandableListViewDemo1"
      }
    ]
  },
  {
    "title": "view（ListView）",
    "node": [
      {
        "title": "ListView 通过 ArrayAdapter 显示数据",
        "url": ".view.listview.ListViewDemo1"
      },
      {
        "title": "ListView 通过 SimpleAdapter 显示数据",
        "url": ".view.listview.ListViewDemo2"
      },
      {
        "title": "ListView 通过自定义 BaseAdapter 显示数据",
        "url": ".view.listview.ListViewDemo3"
      },
      {
        "title": "ListView 的 item 的点击事件和长按事件",
        "url": ".view.listview.ListViewDemo4"
      },
      {
        "title": "ListView 的单选和多选，以及 getView() 的调用时机",
        "url": ".view.listview.ListViewDemo5"
      },
      {
        "title": "ListView 的表头，表尾，分隔线，滚动条的显示与隐藏，数据更新与 ListView 刷新，滚动到指定位置，监听 ListView 的滚动状态",
        "url": ".view.listview.ListViewDemo6"
      },
      {
        "title": "ListView 的多布局（不同的 item 使用不同的项模板）",
        "url": ".view.listview.ListViewDemo7"
      },
      {
        "title": "ListView 滚动到底部加载更多数据",
        "url": ".view.listview.ListViewDemo8"
      },
      {
        "title": "ListView ddddddddddddd",
        "url": ".view.listview.ListViewDemo9"
      }
    ]
  },
  {
    "title": "view（WebView）",
    "node": [
      {
        "title": "WebView 基础",
        "url": ".view.webview.WebViewDemo1"
      },
      {
        "title": "WebView 和 javascript 交互",
        "url": ".view.webview.WebViewDemo2"
      },
      {
        "title": "WebView 拦截 url 跳转，拦截 alert, confirm, prompt 弹出框，拦截文件选择框",
        "url": ".view.webview.WebViewDemo3"
      },
      {
        "title": "WebView 拦截 url 请求并返回自定义数据",
        "url": ".view.webview.WebViewDemo4"
      },
      {
        "title": "WebView 通过 post 加载 url，自定义请求 header，获取或设置 cookie",
        "url": ".view.webview.WebViewDemo5"
      }
    ]
  },
  {
    "title": "view（自定义）",
    "node": [
      {
        "title": "通过一个自定义 View 来演示 measure, layout, draw",
        "url": ".view.custom.CustomView1Demo"
      },
      {
        "title": "通过一个自定义 ViewGroup 来演示 measure, layout, draw",
        "url": ".view.custom.CustomView2Demo"
      },
      {
        "title": "自定义组合控件",
        "url": ".view.custom.CustomView3Demo"
      },
      {
        "title": "自定义控件的自定义属性",
        "url": ".view.custom.CustomView4Demo"
      },
      {
        "title": "aaaaaaaaaaa",
        "url": ".view.custom.MyLayoutDemo1"
      },
      {
        "title": "dddddddddddd",

        "url": ".view.custom.CustomView3Demo"
      }
    ]
  },
  {
    "title": "UI",
    "node": [
      {
        "title": "屏幕密度（物理分辨率, 逻辑分辨率, density, dpi, drawable 文件夹, mipmap 文件夹, dp, sp, px）",
        "url": ".ui.DensityDemo1"
      },
      {
        "title": "样式简介，自定义样式，动态更换样式",
        "url": ".ui.StyleDemo1"
      },
      {
        "title": "主题简介，继承主题并重写其中的一些样式，指定主题",
        "url": ".ui.ThemeDemo1"
      },
      {
        "title": "自定义主题，动态更换主题",
        "url": ".ui.ThemeDemo2"
      },
      {
        "title": "通过主题修改控件的默认样式",
        "url": ".ui.ThemeDemo3"
      },
      {
        "title": "颜色和不透明度",
        "url": ".ui.ColorDemo1"
      },
      {
        "title": "shape 渐变色（线性渐变，放射性渐变，扫描式渐变）",
        "url": ".ui.ShapeDemo1"
      },
      {
        "title": "shape 之填充，描边，圆角，尺寸，内部间距",
        "url": ".ui.ShapeDemo2"
      },
      {
        "title": "shape 形状（矩形，圆形，环形，直线）",
        "url": ".ui.ShapeDemo3"
      }
    ]
  },
  {
    "title": "Animation",
    "node": [
      {
        "title": "Matrix 变换（用于做位移，旋转，缩放，扭曲等变换）",
        "url": ".animation.MatrixDemo1"
      },
      {
        "title": "Matrix 变换（通过自定义控件实现）",
        "url": ".animation.MatrixDemo2"
      },
      {
        "title": "视图动画（View Animation）基础",
        "url": ".animation.AnimationDemo1"
      },
      {
        "title": "视图动画（View Animation）插值器（Interpolator）",
        "url": ".animation.AnimationDemo2"
      },
      {
        "title": "视图动画（View Animation）自定义 Interpolator",
        "url": ".animation.AnimationDemo3"
      },
      {
        "title": "帧动画（Drawable Animation）",
        "url": ".animation.AnimationDemo4"
      },
      {
        "title": "属性动画（Property Animation）中的 ValueAnimator",
        "url": ".animation.AnimationDemo5"
      },
      {
        "title": "属性动画（Property Animation）中的 ObjectAnimator",
        "url": ".animation.AnimationDemo6"
      },
      {
        "title": "属性动画（Property Animation）中的 ViewPropertyAnimator",
        "url": ".animation.AnimationDemo7"
      }
    ]
  },
  {
    "title": "Resource",
    "node": [
      {
        "title": "国际化（多语言）",
        "url": ".resource.LocalizationDemo1"
      }
    ]
  },
  {
    "title": "Activity",
    "node": [
      {
        "title": "Activity 的生命周期",
        "url": ".activity.ActivityDemo1"
      },
      {
        "title": "Activity 的横屏和竖屏，以及横竖屏切换与状态保存",
        "url": ".activity.ActivityDemo2"
      },
      {
        "title": "Activity 之间的跳转和数据传递",
        "url": ".activity.ActivityDemo3"
      },
      {
        "title": "Activity 之间的跳转动画（单独指定或全局指定）",
        "url": ".activity.ActivityDemo4"
      },
      {
        "title": "Activity 堆栈",
        "url": ".activity.ActivityDemo5"
      },
      {
        "title": "Activity 样式（隐藏状态栏；对话框样式）",
        "url": ".activity.ActivityDemo6"
      }
    ]
  },
  {
    "title": "Fragment",
    "node": [
      {
        "title": "Fragment 的生命周期",
        "url": ".fragment.FragmentDemo1"
      },
      {
        "title": "Fragment 的动态加载和生命周期，以及 Fragment 的返回堆栈",
        "url": ".fragment.FragmentDemo2"
      },
      {
        "title": "Fragment 与 Activity 的交互",
        "url": ".fragment.FragmentDemo3"
      },
      {
        "title": "Fragment 动画",
        "url": ".fragment.FragmentDemo4"
      }
    ]
  },
  {
    "title": "异步，多线程",
    "node": [
      {
        "title": "Thread 基础",
        "url": ".async.ThreadDemo1"
      },
      {
        "title": "Thread 演示 Object 的 wait() notify() notifyAll() 的使用",
        "url": ".async.ThreadDemo2"
      },
      {
        "title": "Thread 演示 join() 的用法",
        "url": ".async.ThreadDemo3"
      },
      {
        "title": "Thread 演示 interrupt() 的用法",
        "url": ".async.ThreadDemo4"
      },
      {
        "title": "Thread 的异常处理",
        "url": ".async.ThreadDemo5"
      },
      {
        "title": "Thread 导致的内存泄漏",
        "url": ".async.ThreadDemo6"
      },
      {
        "title": "Handler 的使用",
        "url": ".async.HandlerDemo1"
      },
      {
        "title": "Handler 和 Looper 的使用",
        "url": ".async.HandlerDemo2"
      },
      {
        "title": "Handler 导致的 Activity 内存泄漏",
        "url": ".async.HandlerDemo3"
      },
      {
        "title": "ThreadPool 的基础",
        "url": ".async.ThreadPoolDemo1"
      },
      {
        "title": "ThreadPool 的关闭",
        "url": ".async.ThreadPoolDemo2"
      },
      {
        "title": "Callable, Future, FutureTask 的使用",
        "url": ".async.FutureTaskDemo1"
      },
      {
        "title": "Future, FutureTask 的关闭和异常处理",
        "url": ".async.FutureTaskDemo2"
      },
      {
        "title": "AsyncTask 的使用",
        "url": ".async.AsyncTaskDemo1"
      },
      {
        "title": "Timer 和 TimerTask 的使用",
        "url": ".async.TimerDemo1"
      },
      {
        "title": "ThreadLocal 的使用",
        "url": ".async.ThreadLocalDemo1"
      }
    ]
  },
  {
    "title": "锁，并发处理",
    "node": [
      {
        "title": "Lock 基础",
        "url": ".concurrent.LockDemo1"
      },
      {
        "title": "Lock 可 interrupt 的 Lock",
        "url": ".concurrent.LockDemo2"
      },
      {
        "title": "Lock 演示 Condition 的 await() signal() signalAll() 的使用",
        "url": ".concurrent.LockDemo3"
      },
      {
        "title": "Lock 演示 ReentrantLock 的使用",
        "url": ".concurrent.ReentrantLockDemo1"
      },
      {
        "title": "synchronized 锁方法",
        "url": ".concurrent.SynchronizedDemo1"
      },
      {
        "title": "synchronized 锁代码块",
        "url": ".concurrent.SynchronizedDemo2"
      },
      {
        "title": "ReadWriteLock 基础",
        "url": ".concurrent.ReadWriteLockDemo1"
      },
      {
        "title": "ReadWriteLock 演示 ReentrantReadWriteLock 的使用",
        "url": ".concurrent.ReentrantReadWriteLockDemo1"
      },
      {
        "title": "volatile 与原子性, 可见性, 有序性",
        "url": ".concurrent.VolatileDemo1"
      },
      {
        "title": "CountDownLatch 信号数量",
        "url": ".concurrent.CountDownLatchDemo1"
      },
      {
        "title": "CyclicBarrier 屏障",
        "url": ".concurrent.CyclicBarrierDemo1"
      },
      {
        "title": "Semaphore 许可证中心",
        "url": ".concurrent.SemaphoreDemo1"
      },
      {
        "title": "atomic 原子操作",
        "url": ".concurrent.AtomicDemo1"
      }
    ]
  },
  {
    "title": "服务",
    "node": [
      {
        "title": "android 基础示例",
        "url": ".service.BasicDemo1"
      }
    ]
  },
  {
    "title": "设计模式",
    "node": [
      {
        "title": "Singleton（单例模式）",
        "url": ".designpattern.SingletonDemo"
      }
    ]
  },
  {
    "title": "工具",
    "node": [
      {
        "title": "生成 README.md",
        "url": ".tools.GenerateReadme"
      }
    ]
  }
]